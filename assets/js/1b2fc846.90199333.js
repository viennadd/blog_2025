"use strict";(self.webpackChunkdd_notes=self.webpackChunkdd_notes||[]).push([[9433],{9778:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var i=t(5646),r=t(5105),s=t(6755);const o={title:"Leetcode - Median of Two Sorted Arrays",date:new Date("2016-04-07T23:19:05.000Z"),authors:["alexchen"],tags:["leetcode","algorithm"],categories:["\u5237\u9898"]},l=void 0,a={authorsImageUrls:[void 0]},d=[];function c(n){const e={a:"a",code:"code",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:"\u5bf9\u8fd9\u9898\u60f3\u5230\u4e00\u4e2a\u65b9\u6cd5\uff0c\u65e2\u7136\u662f\u4e24\u4e2a Sorted Arrays, \u7528 Merge Sort \u7c7b\u4f3c\u7684\u5f52\u5e76\u65b9\u6cd5\u7ec4\u5408\u4e24\u4e2a\u6570\u7ec4\u5c31\u53ef\u4ee5\u4e86, \u6839\u636e\u603b\u957f\u5ea6\u7684\u5947\u5076\u62bd\u53d6\u7b2c N \u5927\u7684\u6570\u503c\u51fa\u6765\u5c31\u5b8c\u6210\u5566\u3002\u4f46\u8fd9\u6837\u505a\u7684\u8bdd\u8fd0\u884c\u65f6\u95f4\u662f O(m+n / 2), \u9898\u76ee\u8981\u6c42 O(log(m+n))"}),"\n",(0,r.jsx)(e.p,{children:"\u7b2c\u4e00\u4e2a\u60f3\u6cd5\u5c31\u662f\u4e8c\u5206, \u53c2\u8003\u4e86\u51e0\u4e2a\u535a\u6587\u4e4b\u540e, \u5148\u51c6\u5907\u4e00\u4e2a Kth \u51fd\u6570\u7528\u4e8e\u5bfb\u627e\u4e24\u4e2a sorted array \u7684\u7b2c K \u5c0f\u7684\u6570, \u7136\u540e\u4e2d\u4f4d\u6570\u5c31\u5f88\u5bb9\u6613\u4e86, \u53cd\u800c\u4e00\u5f00\u59cb\u8ffd\u6c42\u4e8c\u5206\u4e2d\u4f4d\u6570\u4f3c\u4e4e\u4f1a\u6709\u4e0d\u5c11 corner cases"}),"\n",(0,r.jsx)(e.p,{children:"\u90a3\u5148\u628a\u95ee\u9898\u6362\u6210\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u7684\u7b2c K \u5c0f\u7684\u6570\u503c"}),"\n",(0,r.jsx)(e.p,{children:"\u6709\u4ee5\u4e0b\u6b65\u9aa4"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u6709\u5e8f vector v1 \u548c v2, \u6c42\u7b2c K \u5c0f"}),"\n",(0,r.jsx)(e.li,{children:"\u4e8c\u5206\u601d\u60f3\u662f\u6bcf\u6b21\u4ece v1 \u548c v2 \u6392\u9664\u4e00\u534a\u7684\u53ef\u9009\u5143\u7d20"}),"\n",(0,r.jsx)(e.li,{children:"\u6709 x, y > 0 && x + y == k,"}),"\n",(0,r.jsx)(e.li,{children:"x, y \u7684\u53d6\u503c\u4e5f\u662f\u6709\u8bb2\u7a76, x = len(v1) / (len(v1) + len(v2)) * k, \u8fd9\u4e2a\u610f\u601d\u662f len(v1) \u5360\u603b size \u7684\u767e\u5206\u6bd4, \u518d\u4e58\u4ee5 k \u7684\u8bdd\u5c31\u53ef\u4ee5\u786e\u4fdd x \u7684\u53d6\u503c\u4e0d\u4f1a\u8d85\u51fa v1 \u7684\u6570\u7ec4\u8303\u56f4, \u8fd9\u91cc\u7b80\u5316\u4e86, \u5b9e\u9645\u4ee3\u7801\u9700\u8981\u6ce8\u610f\u4e00\u4e9b\u8fb9\u754c\u95ee\u9898"}),"\n",(0,r.jsxs)(e.li,{children:["\u5982\u679c ",(0,r.jsx)(e.strong,{children:"v1[x] < v2[y]"}),", \u5219 v1[0 .. x] \u7684\u5143\u7d20\u90fd\u4e0d\u53ef\u80fd\u662f\u7b2c K \u5c0f, \u4ed6\u4eec\u90fd\u80af\u5b9a\u6bd4\u7b2c K \u7684\u6570\u503c\u8981\u5c0f\u4e86, \u6211\u4eec\u5219\u53ef\u4ee5\u6392\u9664\u6389\u8fd9\u4e9b\u6570\u503c,"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"v1[x] > v2[y]"})," \u7684\u8bdd\u90fd\u662f\u540c\u6837\u7684\u601d\u60f3"]}),"\n",(0,r.jsx)(e.li,{children:"\u8c03\u6574 v1, v2 \u7684\u957f\u5ea6, \u4e0b\u8868\u503c, k \u7684\u503c\u7b49, \u7136\u540e\u91cd\u590d\u8fd9\u4e9b\u53d6\u503c\u7136\u540e\u6bd4\u8f83\u7684\u6b65\u9aa4,"}),"\n",(0,r.jsx)(e.li,{children:"\u8c03\u6574\u5b8c size \u548c \u4e0b\u6807\u540e, \u68c0\u67e5\u4e00\u4e0b k \u662f\u5426\u4e0b\u964d\u5230 1, \u7b2c 1 \u5c0f\u7684\u503c\u662f min(v1[0], v2[0]), \u8fd8\u6709\u5982\u679c\u5176\u4e2d\u4e00\u4e2a vector \u7684 size \u4e0b\u964d\u5230 0, \u90a3\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a vector \u7684\u7b2c k \u4e2a\u503c"}),"\n",(0,r.jsxs)(e.li,{children:["\u5982\u679c\u662f ",(0,r.jsx)(e.strong,{children:"v1[x] == v2[y]"})," \u7684\u8bdd, x + y == k, v1[x] == v2[y], \u90a3\u8fd9\u4e2a\u6570\u503c\u5df2\u7ecf\u662f\u7b2c K \u5c0f\u4e86, \u8fd9\u91cc\u662f\u4e00\u4e2a base case"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["\u5927\u5bb6\u53ef\u4ee5 Leetcode \u6d4b\u8bd5\u4e00\u4e0b\u81ea\u5df1\u7684\u4ee3\u7801 ",(0,r.jsx)(e.a,{href:"https://leetcode.com/problems/median-of-two-sorted-arrays/",children:"https://leetcode.com/problems/median-of-two-sorted-arrays/"})]}),"\n",(0,r.jsx)(e.p,{children:"\u4e0b\u9762\u662f\u6211\u63d0\u4ea4\u7684\u4ee3\u7801"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"#ifndef LEETCODE_MEDIAN_OF_TWO_SORTED_ARRAYS_H\n#define LEETCODE_MEDIAN_OF_TWO_SORTED_ARRAYS_H\n\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n\n        if (nums1.size() == 0)\n            return median(nums2);\n        if (nums2.size() == 0)\n            return median(nums1);\n\n        auto total_size = nums1.size() + nums2.size();\n        if (total_size % 2)\n        {\n            return findKtnElement(nums1, nums2, total_size / 2 + 1);\n        }\n        else\n        {\n            return (findKtnElement(nums1, nums2, total_size / 2) +\n                    findKtnElement(nums1, nums2, total_size / 2 + 1)) / 2.0;\n        }\n    }\n\n    double median(vector<int> &v)\n    {\n        if (v.size() % 2)\n        {\n            return v.at(v.size() / 2);\n        }\n        else\n        {\n            return (v.at(v.size() / 2 - 1) +\n                    v.at(v.size() / 2)) / 2.0;\n        }\n    }\n\n\n    int& min(int &a, int &b)\n    {\n        return a < b ? a : b;\n    }\n\n    int& findKtnElement(vector<int> &v1, vector<int> &v2, int k)\n    {\n        auto v1_len = v1.size();\n        auto v2_len = v2.size();\n        if (v1_len == 0)\n            return v2.at(k);\n        if (v2_len == 0)\n            return v1.at(k);\n\n        if (k == 1)\n            return min(v1.at(0), v2.at(0));\n\n        assert(v1_len + v2_len >= k);\n\n        auto v1_begin = v1.begin();\n        auto v2_begin = v2.begin();\n\n        while (true) {\n\n            int i, j;\n            i = v1_len / (v1_len + v2_len + 0.0) * (k - 1);\n            j = k - i - 2;\n\n            auto a = *(v1_begin + i);\n            auto b = *(v2_begin + j);\n            if (a < b) {\n                /* \u4e22\u5f03 v1 \u7684\u524d i + 1 (0 base) \u4e2a */\n                v1_begin += i + 1;\n                v1_len -= i + 1;\n                k -= i + 1;\n            } else if (b < a) {\n                v2_begin += j + 1;\n                v2_len -= j + 1;\n                k -= j + 1;\n            } else {\n                /* \u76f8\u7b49\u7684\u8bdd\u5c31\u4e0d\u7528\u4ecb\u610f\u4e86, \u968f\u610f\u8fd4\u56de\u4e00\u4e2a\u90fd\u662f\u7b2c k \u5c0f */\n                return *(v1_begin + i);\n            }\n\n            if (v1_len == 0)\n                return v2.at(k - 1);\n            if (v2_len == 0)\n                return v1.at(k - 1);\n\n            if (k == 1)\n                return min(*v1_begin, *v2_begin);\n        }\n\n    }\n\n\n};\n\n#endif //LEETCODE_MEDIAN_OF_TWO_SORTED_ARRAYS_H\n\n"})})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},6755:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>l});var i=t(8101);const r={},s=i.createContext(r);function o(n){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),i.createElement(s.Provider,{value:e},n.children)}},5646:n=>{n.exports=JSON.parse('{"permalink":"/blog/Leetcode-Median-of-Two-Sorted-Arrays","editUrl":"https://github.com/viennadd/blog_2025/tree/main/blog/Leetcode-Median-of-Two-Sorted-Arrays.md","source":"@site/blog/Leetcode-Median-of-Two-Sorted-Arrays.md","title":"Leetcode - Median of Two Sorted Arrays","description":"\u5bf9\u8fd9\u9898\u60f3\u5230\u4e00\u4e2a\u65b9\u6cd5\uff0c\u65e2\u7136\u662f\u4e24\u4e2a Sorted Arrays, \u7528 Merge Sort \u7c7b\u4f3c\u7684\u5f52\u5e76\u65b9\u6cd5\u7ec4\u5408\u4e24\u4e2a\u6570\u7ec4\u5c31\u53ef\u4ee5\u4e86, \u6839\u636e\u603b\u957f\u5ea6\u7684\u5947\u5076\u62bd\u53d6\u7b2c N \u5927\u7684\u6570\u503c\u51fa\u6765\u5c31\u5b8c\u6210\u5566\u3002\u4f46\u8fd9\u6837\u505a\u7684\u8bdd\u8fd0\u884c\u65f6\u95f4\u662f O(m+n / 2), \u9898\u76ee\u8981\u6c42 O(log(m+n))","date":"2016-04-07T23:19:05.000Z","tags":[{"inline":true,"label":"leetcode","permalink":"/blog/tags/leetcode"},{"inline":true,"label":"algorithm","permalink":"/blog/tags/algorithm"}],"readingTime":4.08,"hasTruncateMarker":true,"authors":[{"name":"Alex Chen","title":"The main character of the story","url":"https://vienna.bio","page":null,"socials":{"x":"https://x.com/viennadd","linkedin":"https://www.linkedin.com/in/alex-dd/","github":"https://github.com/viennadd"},"imageURL":"https://github.com/viennadd.png","key":"alexchen"}],"frontMatter":{"title":"Leetcode - Median of Two Sorted Arrays","date":"2016-04-07T23:19:05.000Z","authors":["alexchen"],"tags":["leetcode","algorithm"],"categories":["\u5237\u9898"]},"unlisted":false,"prevItem":{"title":"Ubuntu \u5bf9 Retina Display \u7684\u652f\u6301","permalink":"/blog/Ubuntu-\u5bf9-Retina-Display-\u7684\u652f\u6301"},"nextItem":{"title":"\u6253\u5370\u86c7\u5f62\u6570\u7ec4","permalink":"/blog/\u6253\u5370\u86c7\u5f62\u6570\u7ec4"}}')}}]);